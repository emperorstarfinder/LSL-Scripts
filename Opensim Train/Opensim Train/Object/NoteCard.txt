// :SHOW:1
// :CATEGORY:Train
// :NAME:Opensim Train
// :AUTHOR:Moundsa Mayo
// :KEYWORDS:
// :CREATED:2021-04-26 23:42:50
// :EDITED:2021-04-26  22:46:16
// :ID:1135
// :NUM:2025
// :REV:1
// :WORLD:Second Life
// :DESCRIPTION:
// 
// :CODE:
SOME NOTES ABOUT THIS SCRIPT

I'm more of a script hacker than a script editor, and I decided to hack this script. I got rid of the Guide prims and got it to run ON the MESH TRACK! I did this by editing the script and replacing the value of gsSensorTargetName from Guide to Freight. Then I renamed each mesh track to Freight. I found this mostly worked just as well.

Of course when laying track there's issues for sharp curves and sim borders, no matter what the Guides are called. On the sharp curves I didn't rename the track but simply added the old guides and renamed them as Freight, adding enough for the engine to take the curve. On the sim boarder I put two guides - one on either side - so that their centres were close to the boarder. If I didn't have the curve guides close enough to each other and the straight track, or close enough to the boarder, the script assumes it's the end of the line and reverses! Also, the mesh track's 18.5m long. I extended the rail line by changing to LOCAL mode, duplicating a Freight by pressing SHIFT and moving it 1/2 its length along, then changing its horizontal rotation slightly, and moving it along by another 1/2 length. This works up to 18.5m long, but 20m breaks the line.

Why use Freight instead of Guide? It occurred to me the key to this script is how the script finds the next guide in the rail line, and that's done by looking for the correct name. But why only have ONE name for guides. You could have several overlapping transparent sets of guides, each one with the name of the service that runs on it. e.g. "Freight" and "Passenger". Ideally it's be good if for example you could also have a "Shared" guide that different services all use, but I'm not sure how to make that happen yet. Also, perhaps when an engine gets to the end of the line and detects that, it not only reverses the engine, but changes gsSensorTargetName to a different value (e.g. "Up" is changed to "Down") and then it returns down a DIFFERENT track/guides!

Just some ideas. I'm excited that the script works. I really need to learn LSL.
